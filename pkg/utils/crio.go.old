package utils

import (
	"fmt"

	"google.golang.org/grpc"
	pb "k8s.io/cri-api/pkg/apis/runtime/v1alpha2"

	crio "github.com/cri-o/cri-o/client"
)

func GetRuntimeClient() (pb.RuntimeServiceClient, *grpc.ClientConn, error) {
    return nil, nil, nil
}

func CloseConnection(conn *grpc.ClientConn) error {
    return nil
}

func GetCrioContainerNS(runtimeClient pb.RuntimeServiceClient, procPrefix, containerID, socketPath string) (namespace string, err error) {
	if socketPath == "" {
		socketPath = "/var/run/crio/crio.sock"
	}

	client, err := crio.New(socketPath)
	if err != nil {
		return "", fmt.Errorf("err1: %v", err)
	}

	info, err := client.ContainerInfo(containerID)
	if err != nil {
		return "", fmt.Errorf("err2: %v", err)
	}
	fmt.Printf("%v %v\n", info, info.Pid)
	namespace = fmt.Sprintf("%s//proc/%d/ns/net", procPrefix, info.Pid)
	return namespace, nil
}
